name: Deploy to ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/testdb
      run: |
        # 如果tests目录存在且有测试文件，则运行测试
        if [ -d "tests" ] && [ "$(find tests -name '*.py' -not -name '__*' | wc -l)" -gt 0 ]; then
          echo "Running tests..."
          python -m pytest tests/ -v
        else
          echo "No test files found, skipping tests"
          echo "Creating basic test structure for future use"
          mkdir -p tests
          echo "# Add your tests here" > tests/__init__.py
        fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to ECS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.ECS_HOST }}
        username: ${{ secrets.ECS_USERNAME }}
        key: ${{ secrets.ECS_SSH_KEY }}
        script: |
          # 设置项目目录
          PROJECT_DIR="/opt/shop-sphere"
          REPO_URL="https://github.com/darkTianTian/shop-sphere.git"
          
          # 创建项目目录
          mkdir -p $PROJECT_DIR
          cd $PROJECT_DIR
          
          # 备份当前服务
          if [ -f docker-compose.prod.yml ]; then
            echo "停止当前服务..."
            docker-compose -f docker-compose.prod.yml down || true
          fi
          
          # 拉取最新代码
          if [ -d ".git" ]; then
            echo "更新代码..."
            git fetch origin
            git reset --hard origin/main
            git clean -fd
          else
            echo "克隆代码..."
            git clone $REPO_URL .
          fi
          
          # 创建环境变量文件
          echo "创建环境变量文件..."
          cat > .env << EOF
          # 数据库配置
          DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@db:5432/shop_sphere
          
          # OSS配置
          OSS_ACCESS_KEY_ID=${{ secrets.OSS_ACCESS_KEY_ID }}
          OSS_ACCESS_KEY_SECRET=${{ secrets.OSS_ACCESS_KEY_SECRET }}
          OSS_BUCKET_NAME=${{ secrets.OSS_BUCKET_NAME }}
          OSS_ENDPOINT=${{ secrets.OSS_ENDPOINT }}
          
          # JWT配置
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          
          # 应用配置
          ENVIRONMENT=production
          DEBUG=false
          HOST=0.0.0.0
          PORT=8000
          EOF
          
          # 创建生产环境docker-compose文件
          echo "创建Docker Compose配置..."
          cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          
          services:
            app:
              build:
                context: .
                dockerfile: Dockerfile
              container_name: shop-sphere-app
              ports:
                - "80:8000"
              env_file:
                - .env
              depends_on:
                - db
                - redis
              restart: unless-stopped
              volumes:
                - ./app:/app/app
                - ./static:/app/static
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          
            db:
              image: postgres:13
              container_name: shop-sphere-db
              environment:
                POSTGRES_DB: shop_sphere
                POSTGRES_USER: postgres
                POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
              volumes:
                - postgres_data:/var/lib/postgresql/data
                - ./init.sql:/docker-entrypoint-initdb.d/init.sql
              ports:
                - "5432:5432"
              restart: unless-stopped
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 10s
                timeout: 5s
                retries: 5
          
            redis:
              image: redis:7-alpine
              container_name: shop-sphere-redis
              restart: unless-stopped
              ports:
                - "6379:6379"
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 10s
                timeout: 5s
                retries: 3
          
          volumes:
            postgres_data:
          EOF
          
          # 构建并启动服务
          echo "构建并启动服务..."
          docker-compose -f docker-compose.prod.yml build --no-cache
          docker-compose -f docker-compose.prod.yml up -d
          
          # 等待服务启动
          echo "等待服务启动..."
          sleep 60
          
          # 检查服务状态
          echo "检查服务状态..."
          docker-compose -f docker-compose.prod.yml ps
          
          # 检查服务健康状态
          echo "检查应用健康状态..."
          for i in {1..10}; do
            if curl -f http://localhost/health 2>/dev/null; then
              echo "✅ 应用启动成功！"
              break
            else
              echo "⏳ 等待应用启动... ($i/10)"
              sleep 10
            fi
          done
          
          # 显示服务日志
          echo "最近的应用日志:"
          docker-compose -f docker-compose.prod.yml logs --tail=20 app
          
          # 清理未使用的镜像和容器
          echo "清理资源..."
          docker system prune -f
          
          echo "🎉 部署完成！访问 http://${{ secrets.ECS_HOST }} 查看应用" 